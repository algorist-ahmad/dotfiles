#!/bin/bash

export PROMPT_COMMAND=__prompt_command

# Function to check if the current branch is ahead of the remote branch
function __prompt_command() {

    # config
    EXIT="$?"
    CLR0="\[\e[0m\]"       # reset color
    CLR1="\[\e[92m\]"      # green
    CLR2="\[\033[01;34m\]" # ?
    CLR3="\[\e[33m\]"      # yellow, warning
    CLR4="\[\e[31m\]"      # red, error
    SYMB="❯"               # symbol
    tmp_symbol="\[\$\]"
    
    local warning_color="\[\e[33m\]" # Yellow color
    local error_color="\[\e[31m\]"   # Red color
    local default_symbol=''          # 
    local up_to_date_symbol="♡"      #
    local not_added_symbol="🔶"      # Symbol for case 
    local not_committed_symbol="🔷"  # Symbol for case 
    local ahead_symbol="🔺"          # Symbol for case 
    local behind_symbol="🔻"         # Symbol for case
    
    # PSX="\[${green}\]\$(date +'%H:%M')\[${none}\] \[\033[01;34m\]\w\[\033[00m\] \[\e[5m\]⚡\[\e[0m\]"
    # PSY="\[${green}\]\[$(get_date)\]\[${none}\] \[${color2}\]\w\[${none}\] \[${tm_psymbol}\]"

    # Check git status
    local git_status=$(git status 2>&1)
    
    if [[ $git_status == *"not a git repository"* ]]; then
        SYMBOL=$default_symbol
        COLOR=$default_color
    elif [[ $git_status == *"Untracked files:"* ]]; then
        SYMBOL=$not_added_symbol
        COLOR=$warning_color
    elif [[ $git_status == *"Changes not staged for commit"* ]]; then
        SYMBOL=$not_added_symbol
        COLOR=$warning_color
    elif [[ $git_status == *"Changes to be committed"* ]]; then
        SYMBOL=$not_committed_symbol
        COLOR=$warning_color
    elif [[ $git_status == *"Your branch is ahead"* ]]; then
        SYMBOL=$ahead_symbol
        COLOR=$warning_color
    elif [[ $git_status == *"Your branch is behind"* ]]; then
        SYMBOL=$behind_symbol
        COLOR=$warning_color
    elif [[ $git_status == *"Your branch is up to date"* ]]; then
        SYMBOL=$up_to_date_symbol
        COLOR=$default_color
    fi

    # Notify error, ovverrides warning
    if [ $EXIT != 0 ]; then
        COLOR=$error_color
    fi
    
    PS1="\[${SYMBOL}\] \[\e[5;92m\]\$(date +'%H:%M')\[\e[0m\] \[\033[01;34m\]\w\[\033[00m\] ${COLOR}\[\e[5m\]⚡\[\e[0m\]"

    #************************************************************************************************

    # single integral ∫
    # Check if git status output is not empty
    white="\e[0;37m"
    _0="\e[0m"
    if [[ -n $(git status -s 2>/dev/null) ]]; then
        echo -e "${white}⌠ Δ$_0"
        # Store the total number of lines in the output
        total_lines=$(git -c color.status=always status -s | wc -l)
        # Iterate over each line of the output
        line_count=0#!/bin/bash
        
        # Define colors
        green="\e[5;92m"
        color2="\033[01;34m"
        none="\e[0m"
        
        # Define PS1 for prompt
        PSX="\[${green}\]\$(date +'%H:%M')\[${none}\] \[\033[01;34m\]\w\[\033[00m\] \[\e[5m\]⚡\[\e[0m\]"
        PSY="\[${green}\]\[$(get_date)\]\[${none}\] \[${color2}\]\w\[${none}\] \[${symbol}\]"
        PS0
        
        # Set PROMPT_COMMAND
        export PROMPT_COMMAND=__prompt_command
        
        # Function to set PS1 with git status information
        function __prompt_command() {
            local EXIT="$?"  # Store exit status
        
            # Define colors
            local default_color="\[\e[0m\]"
            local warning_color="\[\e[33m\]"
            local error_color="\[\e[31m\]"
        
            # Define symbols
            local default_symbol=''
            local up_to_date_symbol='♡'
            local not_added_symbol='🔶'
            local not_committed_symbol='🔷'
            local ahead_symbol='🔺'
            local behind_symbol='🔻'
        
            # Default values
            local SYMBOL=""
            local COLOR="\[\e[0m\]"
            PS1=""
        
            # Get git status
            local git_status=$(git status 2>&1)
        
            # Check git status and set SYMBOL and COLOR accordingly
            if [[ $git_status == *"not a git repository"* ]]; then
                SYMBOL=$default_symbol
                COLOR=$default_color
            elif [[ $git_status == *"Untracked files:"* || $git_status == *"Changes not staged for commit"* ]]; then
                SYMBOL=$not_added_symbol
                COLOR=$warning_color
            elif [[ $git_status == *"Changes to be committed"* ]]; then
                SYMBOL=$not_committed_symbol
                COLOR=$warning_color
            elif [[ $git_status == *"Your branch is ahead"* ]]; then
                SYMBOL=$ahead_symbol
                COLOR=$warning_color
            elif [[ $git_status == *"Your branch is behind"* ]]; then
                SYMBOL=$behind_symbol
                COLOR=$warning_color
            elif [[ $git_status == *"Your branch is up to date"* ]]; then
                SYMBOL=$up_to_date_symbol
                COLOR=$defaulat_color
            fi
        
            # Notify error, overrides warning
            if [ $EXIT != 0 ]; then
                COLOR=$error_color
            fi
        
            # Set PS1 with date, working directory, and git status information
            PS1="\[${SYMBOL}\] \[\e[5;92m\]\$(date +'%H:%M')\[\e[0m\] \[\033[01;34m\]\w\[\033[00m\] ${COLOR}\[\e[5m\]⚡\[\e[0m\]"
        
            # Check if git status output is not empty and display git status
            white="\e[0;37m"
            _0="\e[0m"
            if [[ -n $(git status -s 2>/dev/null) ]]; then
                echo -e "${white}⌠ Δ$_0"
                total_lines=$(git -c color.status=always status -s | wc -l)
                line_count=0
                while IFS= read -r line; do
                    ((line_count++))
                    if ((line_count < total_lines)); then
                        printf "${white}|$_0$line\n"
                    else
                        printf "${white}⌡$_0$line\n"
                    fi
                done <<< "$(git -c color.status=always status -s)"
            fi
        }
        
        while IFS= read -r line; do
            # Increment line count
            ((line_count++))
            # Prepend a character to the beginning of each line
            if ((line_count < total_lines)); then
                printf "${white}|$_0$line\n"
            else
                printf "${white}⌡$_0$line\n"
            fi
        done <<< "$(git -c color.status=always status -s)"
    fi
}
